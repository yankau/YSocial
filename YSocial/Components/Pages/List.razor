@page "/friends/list"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using YSocial.Components.Models
@using YSocial.Components.Services
@inject AuthenticationStateProvider AuthStateProvider
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="row justify-content-center pt-4 pb-4">
    <div class="col-lg-6">
        <div class="card bg-dark text-light" style="width: 600px; margin: 0 auto; background-color: #2c2c2c">
            <div class="card-header" style="background-color: #1a1a1a">
                <h2 class="mb-0">Friends List</h2>
            </div>
            <div class="card-body" style="background-color: #1a1a1a">
                @if (isLoading)
                {
                    <div class="loading-container text-center">Loading...</div>
                }
                else if (!isAuthenticated)
                {
                    <div class="unauthorized-container text-center">
                        <p>Please sign in to view your friends</p>
                        <a href="/login" class="btn btn-primary">Sign In</a>
                    </div>
                }
                else if (!friends.Any())
                {
                    <div class="text-center">No friends yet</div>
                }
                else
                {
                    <div class="friends-list">
                        @foreach (var friend in friends)
                        {
                            <div class="friend-item d-flex align-items-center justify-content-between p-2 mb-2 bg-secondary rounded">
                                <div class="d-flex align-items-center">
                                    <img src="@(string.IsNullOrEmpty(friend.AvatarUrl) ? "/images/default-avatar.png" : friend.AvatarUrl)"
                                         class="avatar-preview rounded-circle me-2"
                                         style="width: 40px; height: 40px; object-fit: cover"
                                         alt="Friend avatar" />
                                    <div>
                                        <div class="fw-bold">@friend.Username</div>
                                        <div class="small @(friend.IsOnline ? "text-success" : "text-muted")">
                                            @(friend.IsOnline ? "Online" : "Offline")
                                        </div>
                                    </div>
                                </div>
                                <button class="btn btn-danger btn-sm" @onclick="() => RemoveFriend(friend.Id)">
                                    Remove
                                </button>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private bool isLoading = true;
    private bool isAuthenticated;
    private List<UserAccount> friends = new();
    private UserAccount currentUser = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAuthenticationState();
    }

    private async Task LoadAuthenticationState()
    {
        isLoading = true;
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
        {
            var username = authState.User.Identity?.Name;
            if (!string.IsNullOrEmpty(username))
            {
                using var dbContext = DbContextFactory.CreateDbContext();
                currentUser = await dbContext.UserAccounts
                    .AsNoTracking()
                    .FirstOrDefaultAsync(u => u.Username == username) ?? new UserAccount();

                if (currentUser.Id == 0)
                {
                    isAuthenticated = false;
                    Navigation.NavigateTo("/login");
                    return;
                }
                

                await LoadFriends();
            }
            else
            {
                isAuthenticated = false;
                Navigation.NavigateTo("/login");
            }
        }
        else
        {
            Navigation.NavigateTo("/login");
        }

        isLoading = false;
    }

    private async Task LoadFriends()
    {
        try
        {
            using var dbContext = DbContextFactory.CreateDbContext();
            var friendships = await dbContext.Friendships
                .AsNoTracking()
                .Include(f => f.User1)
                .Include(f => f.User2)
                .Where(f => (f.User1Id == currentUser.Id || f.User2Id == currentUser.Id) && f.Status == "accepted")
                .ToListAsync();

            friends = friendships
                .Select(f => f.User1Id == currentUser.Id ? f.User2 : f.User1)
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading friends: {ex}");
        }
    }

    private async Task RemoveFriend(int friendId)
    {
        try
        {
            using var dbContext = DbContextFactory.CreateDbContext();
            var friendship = await dbContext.Friendships
                .FirstOrDefaultAsync(f => 
                    (f.User1Id == currentUser.Id && f.User2Id == friendId) || 
                    (f.User1Id == friendId && f.User2Id == currentUser.Id));

            if (friendship != null)
            {
                dbContext.Friendships.Remove(friendship);
                await dbContext.SaveChangesAsync();
                await LoadFriends();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing friend: {ex}");
        }
    }
    }