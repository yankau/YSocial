@page "/friends/requests"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using YSocial.Components.Models
@using YSocial.Components.Services
@inject AuthenticationStateProvider AuthStateProvider
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="row justify-content-center pt-4 pb-4">
    <div class="col-lg-6">
        <div class="card bg-dark text-light" style="width: 600px; margin: 0 auto; background-color: #2c2c2c">
            <div class="card-header" style="background-color: #1a1a1a">
                <h2 class="mb-0">Friend Requests</h2>
            </div>
            <div class="card-body" style="background-color: #1a1a1a">
                @if (isLoading)
                {
                    <div class="loading-container text-center">Loading...</div>
                }
                else if (!isAuthenticated)
                {
                    <div class="unauthorized-container text-center">
                        <p>Please sign in to view friend requests</p>
                        <a href="/login" class="btn btn-primary">Sign In</a>
                    </div>
                }
                else if (!incomingRequests.Any())
                {
                    <div class="text-center">No pending friend requests</div>
                }
                else
                {
                    <div class="requests-list">
                        @foreach (var request in incomingRequests)
                        {
                            <div class="request-item d-flex align-items-center justify-content-between p-2 mb-2 bg-secondary rounded">
                                <div class="d-flex align-items-center">
                                    <img src="@(string.IsNullOrEmpty(request.User1.AvatarUrl) ? "/images/default-avatar.png" : request.User1.AvatarUrl)"
                                         class="avatar-preview rounded-circle me-2"
                                         style="width: 40px; height: 40px; object-fit: cover"
                                         alt="User avatar" />
                                    <div>
                                        <div class="fw-bold">@request.User1.Username</div>
                                        <div class="small text-muted">Sent you a friend request</div>
                                    </div>
                                </div>
                                <div>
                                    <button class="btn btn-success btn-sm me-2" @onclick="() => AcceptRequest(request.Id)">
                                        Accept
                                    </button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => RejectRequest(request.Id)">
                                        Reject
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private bool isLoading = true;
    private bool isAuthenticated;
    private List<Friendship> incomingRequests = new();
    private UserAccount currentUser = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAuthenticationState();
    }

    private async Task LoadAuthenticationState()
    {
        isLoading = true;
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        

        if (isAuthenticated)
        {
            var username = authState.User.Identity?.Name;
            if (!string.IsNullOrEmpty(username))
            {
                using var dbContext = DbContextFactory.CreateDbContext();
                currentUser = await dbContext.UserAccounts
                    .AsNoTracking()
                    .FirstOrDefaultAsync(u => u.Username == username) ?? new UserAccount();

                if (currentUser.Id == 0)
                {
                    isAuthenticated = false;
                    Navigation.NavigateTo("/login");
                    return;
                }

                await LoadIncomingRequests();
            }
            else
            {
                isAuthenticated = false;
                Navigation.NavigateTo("/login");
            }
        }
        else
        {
            Navigation.NavigateTo("/login");
        }

        isLoading = false;
    }

    private async Task LoadIncomingRequests()
    {
        try
        {
            using var dbContext = DbContextFactory.CreateDbContext();
            incomingRequests = await dbContext.Friendships
                .AsNoTracking()
                .Include(f => f.User1)
                .Where(f => f.User2Id == currentUser.Id && f.Status == "pending")
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading friend requests: {ex}");
        }
    }

    private async Task AcceptRequest(int requestId)
    {
        try
        {
            using var dbContext = DbContextFactory.CreateDbContext();
            var request = await dbContext.Friendships.FindAsync(requestId);
            if (request != null)
            {
                request.Status = "accepted";
                await dbContext.SaveChangesAsync();
                await LoadIncomingRequests();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error accepting friend request: {ex}");
        }
    }

    private async Task RejectRequest(int requestId)
    {
        try
        {
            using var dbContext = DbContextFactory.CreateDbContext();
            var request = await dbContext.Friendships.FindAsync(requestId);
            if (request != null)
            {
                dbContext.Friendships.Remove(request);
                await dbContext.SaveChangesAsync();
                await LoadIncomingRequests();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error rejecting friend request: {ex}");
        }
    }
}
