@page "/viewprofile/{Username}"
@using System.Globalization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using YSocial.Components.Models
@using YSocial.Components.Services
@inject AuthenticationStateProvider AuthStateProvider
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Профиль @Username</PageTitle>

@if (isLoading)
{
    <div class="loading-container">Загрузка профиля...</div>
}
else if (user == null)
{
    <div class="unauthorized-container">
        <p>Пользователь не найден</p>
        <a href="/friends/list" class="login-button">Вернуться к списку друзей</a>
    </div>
}
else
{
    <div class="profile-layout">
        <div class="profile-header d-flex align-items-center justify-content-between">
            <div class="d-flex align-items-center">
                <img class="profile-avatar" src="@GetAvatarUrl()" alt="Аватар профиля" />
                <div class="ms-3">
                    <h1 class="username mb-0 d-inline">@user.Username</h1>
                    <p class="description mt-1 mb-0">@(string.IsNullOrEmpty(user.Description) ? "Описания пока нет" : user.Description)</p>
                </div>
            </div>
        </div>

        <div class="posts-section mt-4">
            <h3>Недавние посты</h3>
            @if (recentPosts.Any())
            {
                <div class="posts-list">
                    @foreach (var post in recentPosts.OrderByDescending(p => p.CreatedAt))
                    {
                        <div class="post-item">
                            <h4>@post.Title</h4>
                            <p>@post.Content</p>
                            @if (!string.IsNullOrEmpty(post.ImageUrls))
                            {
                                @foreach (var imageUrl in post.ImageUrls.Split(',', StringSplitOptions.RemoveEmptyEntries))
                                {
                                    <img src="@imageUrl.Trim()" alt="Изображение поста" class="post-image" />
                                }
                            }
                            <span>@post.CreatedAt.ToString("MMM dd, yyyy", CultureInfo.InvariantCulture)</span>
                        </div>
                    }
                </div>
            }
            else
            {
                <p>Постов пока нет</p>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public string Username { get; set; } = string.Empty;

    private UserAccount? user;
    private bool isLoading = true;
    private List<Post> recentPosts = [];

    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
    }

    private async Task LoadUserData()
    {
        isLoading = true;
        StateHasChanged();

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var isAuthenticated = authState.User?.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated && !string.IsNullOrEmpty(Username))
        {
            using var dbContext = DbContextFactory.CreateDbContext();
            user = await dbContext.UserAccounts
                .Include(u => u.Posts)
                .FirstOrDefaultAsync(u => u.Username == Username);

            if (user != null)
            {
                recentPosts = user.Posts?.ToList() ?? [];
            }
        }

        isLoading = false;
        StateHasChanged();
    }

    private string GetAvatarUrl() => string.IsNullOrEmpty(user?.AvatarUrl) ? "/images/default-avatar.png" : user.AvatarUrl;
}

<style>
    .profile-layout {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }

    .profile-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .profile-avatar {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        object-fit: cover;
        border: 2px solid #967bb6;
    }

    .username {
        font-size: 1.5rem;
        font-weight: bold;
    }

    .description {
        font-size: 1rem;
        color: #6c757d;
    }

    .posts-section {
        margin-top: 20px;
    }

    .post-item {
        border-bottom: 1px solid #444;
        padding: 15px 0;
    }

    .post-image {
        max-width: 100%;
        height: auto;
        margin-top: 10px;
    }

    .loading-container, .unauthorized-container {
        text-align: center;
        margin-top: 3rem;
    }

    .login-button {
        color: #967bb6;
        text-decoration: none;
        font-weight: bold;
        padding: 0.5rem 1rem;
        border: 1px solid #967bb6;
        border-radius: 4px;
    }
</style>