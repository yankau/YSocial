@page "/friends"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using YSocial.Components.Models
@using YSocial.Components.Services
@inject AuthenticationStateProvider AuthStateProvider
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="row justify-content-center pt-4 pb-4">
    <div class="col-lg-6">
        <div class="card bg-dark text-light" style="width: 600px; margin: 0 auto; background-color: #2c2c2c">
            <div class="card-header" style="background-color: #1a1a1a">
                <h2 class="mb-0">Friends</h2>
            </div>
            <div class="card-body" style="background-color: #1a1a1a">
                @if (isLoading)
                {
                <div class="loading-container text-center">Loading...</div>
                }
                else if (!isAuthenticated)
                {
                <div class="unauthorized-container text-center">
                    <p>Please sign in to view your friends</p>
                    <a href="/login" class="btn btn-primary">Sign In</a>
                </div>
                }
                else
                {
                <!-- Navigation Buttons -->
                <div class="tab-buttons mb-3">
                    <button class="btn btn-purple me-2" @onclick="NavigateToOnline">
                        Online
                    </button>
                    <button class="btn btn-purple me-2" @onclick="NavigateToList">
                        List
                    </button>
                    <button class="btn btn-purple" @onclick="NavigateToRequests">
                        Requests (@incomingRequests.Count)
                    </button>
                </div>

                <!-- Search Bar -->
                <div class="search-bar mb-4">
                    <EditForm Model="friendRequestModel" OnValidSubmit="SendFriendRequest" FormName="FriendRequestForm" id="friend-request-form">
                        <DataAnnotationsValidator />
                        <div class="input-group">
                            <InputText @bind-Value="friendRequestModel.Username" class="form-control bg-secondary border-dark text-light" placeholder="Enter username to add friend" @oninput="OnInputChanged" />
                            <button class="btn btn-purple" type="submit" disabled="@isSendingRequest">
                                @(isSendingRequest ? "Sending..." : "Send Request")
                            </button>
                        </div>
                        <ValidationMessage For="() => friendRequestModel.Username" />
                        @if (!string.IsNullOrEmpty(searchMessage))
                        {
                        <div class="mt-2 @(searchSuccess ? "text-success" : "text-danger")">@searchMessage</div>
                        }
                        @if (showUserInfo && !string.IsNullOrEmpty(friendRequestModel.Username))
                        {
                        <div class="user-info mt-3">
                            <div class="d-flex align-items-center mb-2">
                                <img src="@(string.IsNullOrEmpty(targetUserAvatar) ? "/images/default-avatar.png" : targetUserAvatar)"
                                     class="avatar-preview rounded-circle me-2"
                                     style="width: 40px; height: 40px; object-fit: cover"
                                     alt="User avatar" />
                                <span>@friendRequestModel.Username</span>
                            </div>
                            @if (!string.IsNullOrEmpty(targetUserDescription))
                            {
                            <div class="user-description small text-muted">
                                @targetUserDescription
                            </div>
                            }
                        </div>
                        }
                    </EditForm>
                </div>
                }
            </div>
        </div>
    </div>
</div>

<style>
    .tab-buttons .btn {
        border-radius: 5px;
        pointer-events: auto;
        z-index: 10;
    }

    .btn-purple {
        background-color: #967bb6;
        border-color: #967bb6;
        color: white;
    }

    .btn-purple:hover {
        background-color: #845aa6;
        border-color: #845aa6;
    }

    .search-bar .form-control {
        background-color: #2c2c2c;
        border: 1px solid #444;
    }

    .loading-container, .unauthorized-container {
        padding: 20px;
        text-align: center;
    }
</style>

@code {
[SupplyParameterFromForm]
private FriendRequestModel friendRequestModel { get; set; } = new();
private string? searchMessage;
private bool searchSuccess;
private bool isSendingRequest;
private bool isLoading = true;
private bool isAuthenticated;
private bool showUserInfo;
private string targetUserAvatar = string.Empty;
private string targetUserDescription = string.Empty;
private List<Friendship> incomingRequests = [];
private UserAccount currentUser = new();

protected override async Task OnInitializedAsync()
{
Console.WriteLine("Friends.razor: OnInitializedAsync started");
try
{
await LoadAuthenticationState();
}
catch (Exception ex)
{
Console.WriteLine($"Friends.razor: OnInitializedAsync error: {ex}");
searchMessage = "Error loading friends page.";
searchSuccess = false;
isLoading = false;
await InvokeAsync(StateHasChanged);
}
}

protected override async Task OnAfterRenderAsync(bool firstRender)
{
if (firstRender)
{
Console.WriteLine($"Friends.razor: OnAfterRenderAsync, firstRender={firstRender}");
try
{
await JSRuntime.InvokeVoidAsync("preventDoubleSubmit", "friend-request-form");
Console.WriteLine("Friends.razor: preventDoubleSubmit initialized for friend-request-form");
}
catch (Exception ex)
{
Console.WriteLine($"Friends.razor: Error initializing preventDoubleSubmit: {ex}");
}
}
}

private async Task LoadAuthenticationState()
{
Console.WriteLine("Friends.razor: LoadAuthenticationState started");
isLoading = true;
await InvokeAsync(StateHasChanged);

var authState = await AuthStateProvider.GetAuthenticationStateAsync();
isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
Console.WriteLine($"Friends.razor: isAuthenticated = {isAuthenticated}");

if (isAuthenticated)
{
var username = authState.User.Identity?.Name;
if (!string.IsNullOrEmpty(username))
{
using var dbContext = DbContextFactory.CreateDbContext();
currentUser = await dbContext.UserAccounts
.AsNoTracking()
.FirstOrDefaultAsync(u => u.Username == username) ?? new UserAccount();

if (currentUser.Id == 0)
{
Console.WriteLine("Friends.razor: Current user not found");
isAuthenticated = false;
Navigation.NavigateTo("/login");
return;
}

await LoadIncomingRequests();
}
else
{
Console.WriteLine("Friends.razor: No username in auth state");
isAuthenticated = false;
Navigation.NavigateTo("/login");
}
}
else
{
Console.WriteLine("Friends.razor: Not authenticated");
Navigation.NavigateTo("/login");
}

isLoading = false;
await InvokeAsync(StateHasChanged);
}

private async Task LoadIncomingRequests()
{
Console.WriteLine("Friends.razor: LoadIncomingRequests started");
try
{
using var dbContext = DbContextFactory.CreateDbContext();
incomingRequests = await dbContext.Friendships
.AsNoTracking()
.Include(f => f.User1)
.Where(f => f.User2Id == currentUser.Id && f.Status == "pending")
.ToListAsync();
Console.WriteLine($"Friends.razor: Loaded {incomingRequests.Count} incoming requests");
}
catch (Exception ex)
{
Console.WriteLine($"Friends.razor: Error loading incoming requests: {ex}");
searchMessage = "Error loading friend requests.";
searchSuccess = false;
}
finally
{
await InvokeAsync(StateHasChanged);
Console.WriteLine("Friends.razor: LoadIncomingRequests completed");
}
}

private void NavigateToOnline()
{
Console.WriteLine("Friends.razor: Navigating to /friends/online");
Navigation.NavigateTo("/friends/online");
}

private void NavigateToList()
{
Console.WriteLine("Friends.razor: Navigating to /friends/list");
Navigation.NavigateTo("/friends/list");
}

private void NavigateToRequests()
{
Console.WriteLine("Friends.razor: Navigating to /friends/requests");
Navigation.NavigateTo("/friends/requests");
}

private async Task SendFriendRequest()
{
if (isSendingRequest)
{
Console.WriteLine("Friends.razor: SendFriendRequest already in progress, ignoring");
return;
}

Console.WriteLine($"Friends.razor: SendFriendRequest started for username '{friendRequestModel.Username}'");
isSendingRequest = true;
searchMessage = null;
searchSuccess = false;
await InvokeAsync(StateHasChanged);

try
{
if (string.IsNullOrWhiteSpace(friendRequestModel.Username))
{
searchMessage = "Username is required.";
Console.WriteLine("Friends.razor: Username is empty");
return;
}

if (friendRequestModel.Username.Equals(currentUser.Username, StringComparison.OrdinalIgnoreCase))
{
searchMessage = "You cannot add yourself as a friend.";
Console.WriteLine("Friends.razor: Attempted to add self as friend");
return;
}

using var dbContext = DbContextFactory.CreateDbContext();
var targetUser = await dbContext.UserAccounts
.AsNoTracking()
.FirstOrDefaultAsync(u => u.Username == friendRequestModel.Username);

if (targetUser == null)
{
searchMessage = "User not found.";
Console.WriteLine("Friends.razor: User not found");
return;
}

var existingFriendship = await dbContext.Friendships
.AsNoTracking()
.FirstOrDefaultAsync(f =>
(f.User1Id == currentUser.Id && f.User2Id == targetUser.Id) ||
(f.User1Id == targetUser.Id && f.User2Id == currentUser.Id));

if (existingFriendship != null)
{
searchMessage = existingFriendship.Status == "accepted"
? "This user is already your friend."
: "A friend request is already pending.";
Console.WriteLine($"Friends.razor: Existing friendship status: {existingFriendship.Status}");
return;
}

var friendship = new Friendship
{
User1Id = currentUser.Id,
User2Id = targetUser.Id,
Status = "pending",
CreatedAt = DateTime.UtcNow
};

dbContext.Friendships.Add(friendship);
await dbContext.SaveChangesAsync();
Console.WriteLine($"Friends.razor: Friend request sent to {targetUser.Username}");

searchMessage = "Friend request sent successfully!";
searchSuccess = true;
friendRequestModel.Username = "";
await LoadIncomingRequests();
}
catch (Exception ex)
{
searchMessage = "Error sending friend request.";
searchSuccess = false;
Console.WriteLine($"Friends.razor: Error sending friend request: {ex}");
}
finally
{
isSendingRequest = false;
await InvokeAsync(StateHasChanged);
Console.WriteLine("Friends.razor: SendFriendRequest completed");
}
}

private async Task OnInputChanged(ChangeEventArgs e)
{
friendRequestModel.Username = e.Value?.ToString() ?? string.Empty;
showUserInfo = false;
targetUserAvatar = string.Empty;
targetUserDescription = string.Empty;
searchMessage = null;
searchSuccess = false;

Console.WriteLine($"Friends.razor: Search input changed to '{friendRequestModel.Username}'");

if (!string.IsNullOrEmpty(friendRequestModel.Username))
{
using var dbContext = DbContextFactory.CreateDbContext();
var userAccount = await dbContext.UserAccounts
.AsNoTracking()
.Where(u => u.Username == friendRequestModel.Username)
.Select(u => new { u.AvatarUrl, u.Description })
.FirstOrDefaultAsync();

if (userAccount != null)
{
showUserInfo = true;
targetUserAvatar = userAccount.AvatarUrl ?? string.Empty;
targetUserDescription = userAccount.Description ?? string.Empty;
Console.WriteLine($"Friends.razor: Found user '{friendRequestModel.Username}' with avatar '{targetUserAvatar}'");
}
else
{
Console.WriteLine($"Friends.razor: User '{friendRequestModel.Username}' not found");
}
}

await InvokeAsync(StateHasChanged);
}
}