@page "/friends"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using YSocial.Components.Models
@using YSocial.Components.Services
@inject AuthenticationStateProvider AuthStateProvider
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="row justify-content-center pt-4 pb-4">
    <div class="col-lg-6">
        <div class="card bg-dark text-light" style="width: 600px; margin: 0 auto; background-color: #2c2c2c">
            <div class="card-header" style="background-color: #1a1a1a">
                <h2 class="mb-0">Friends</h2>
            </div>
            <div class="card-body" style="background-color: #1a1a1a">
                @if (isLoading)
                {
                    <div class="loading-container text-center">Loading friends...</div>
                }
                else if (!isAuthenticated)
                {
                    <div class="unauthorized-container text-center">
                        <p>Please sign in to view your friends</p>
                        <a href="/login" class="btn btn-primary">Sign In</a>
                    </div>
                }
                else
                {
                    <!-- Debug Input Field -->
                    <div class="mb-3">
                        <label class="form-label">Debug Input (for testing binding):</label>
                        <input type="text" class="form-control bg-secondary border-dark text-light" @bind="debugInput" @bind:event="oninput" placeholder="Type here to test input binding" />
                        <p>Current value: @debugInput</p>
                    </div>

                    <!-- Tab Buttons -->
                    <div class="tab-buttons mb-3">
                        <button class="btn btn-outline-light me-2 @(activeTab == "online" ? "active" : "")" disabled="@isSwitchingTab" @onclick='() => SetTab("online")'>
                            @(isSwitchingTab && activeTab == "online" ? "Loading..." : "Online")
                        </button>
                        <button class="btn btn-outline-light me-2 @(activeTab == "list" ? "active" : "")" disabled="@isSwitchingTab" @onclick='() => SetTab("list")'>
                            @(isSwitchingTab && activeTab == "list" ? "Loading..." : "List")
                        </button>
                        <button class="btn btn-outline-light @(activeTab == "requests" ? "active" : "")" disabled="@isSwitchingTab" @onclick='() => SetTab("requests")'>
                            @(isSwitchingTab && activeTab == "requests" ? "Loading..." : "Requests (@incomingRequests.Count)")
                        </button>
                    </div>

                    <!-- Search Bar -->
                    <div class="search-bar mb-4">
                        <EditForm Model="friendRequestModel" OnValidSubmit="SendFriendRequest" FormName="FriendRequestForm" id="friend-request-form">
                            <DataAnnotationsValidator />
                            <div class="input-group">
                                <InputText @bind-Value="friendRequestModel.Username" class="form-control bg-secondary border-dark text-light" placeholder="Enter username to add friend" @oninput="OnInputChanged" />
                                <button class="btn btn-primary" type="submit" disabled="@isSendingRequest">
                                    @(isSendingRequest ? "Sending..." : "Send Request")
                                </button>
                            </div>
                            <ValidationMessage For="() => friendRequestModel.Username" />
                            @if (!string.IsNullOrEmpty(searchMessage))
                            {
                                <div class="mt-2 @(searchSuccess ? "text-success" : "text-danger")">@searchMessage</div>
                            }
                            @if (showUserInfo && !string.IsNullOrEmpty(friendRequestModel.Username))
                            {
                                <div class="user-info mt-3">
                                    <div class="d-flex align-items-center mb-2">
                                        <img src="@(string.IsNullOrEmpty(targetUserAvatar) ? "/images/default-avatar.png" : targetUserAvatar)" 
                                             class="avatar-preview rounded-circle me-2" 
                                             style="width: 40px; height: 40px; object-fit: cover" 
                                             alt="User avatar" />
                                        <span>@friendRequestModel.Username</span>
                                    </div>
                                    @if (!string.IsNullOrEmpty(targetUserDescription))
                                    {
                                        <div class="user-description small text-muted">
                                            @targetUserDescription
                                        </div>
                                    }
                                </div>
                            }
                        </EditForm>
                    </div>

                    <!-- Tab Content -->
                    @if (activeTab == "online")
                    {
                        <h4>Online Friends</h4>
                        @if (isRefreshingOnlineFriends)
                        {
                            <p>Checking for online friends...</p>
                        }
                        else if (onlineFriends.Any())
                        {
                            <div class="friends-list">
                                @foreach (var friend in onlineFriends)
                                {
                                    <div class="friend-item d-flex align-items-center mb-2">
                                        <img src="@(friend.AvatarUrl ?? "/images/default-avatar.png")" alt="Avatar" class="friend-avatar me-2" />
                                        <span>@friend.Username</span>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <p>No friends online.</p>
                        }
                    }
                    else if (activeTab == "list")
                    {
                        <h4>All Friends</h4>
                        @if (isLoadingFriends)
                        {
                            <p>Loading friends...</p>
                        }
                        else if (friends.Any())
                        {
                            <div class="friends-list">
                                @foreach (var friend in friends)
                                {
                                    <div class="friend-item d-flex align-items-center mb-2">
                                        <img src="@(friend.AvatarUrl ?? "/images/default-avatar.png")" alt="Avatar" class="friend-avatar me-2" />
                                        <span>@friend.Username</span>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <p>You have no friends yet.</p>
                        }
                    }
                    else if (activeTab == "requests")
                    {
                        <h4>Incoming Friend Requests</h4>
                        @if (isLoadingRequests)
                        {
                            <p>Loading requests...</p>
                        }
                        else if (incomingRequests.Any())
                        {
                            <div class="requests-list">
                                @foreach (var request in incomingRequests)
                                {
                                    <div class="request-item d-flex align-items-center justify-content-between mb-2">
                                        <div class="d-flex align-items-center">
                                            <img src="@(request.User1.AvatarUrl ?? "/images/default-avatar.png")" alt="Avatar" class="friend-avatar me-2" />
                                            <span>@request.User1.Username</span>
                                        </div>
                                        <div>
                                            <button class="btn btn-sm btn-success me-2" disabled="@isProcessingRequest" @onclick="() => AcceptRequest(request.Id)">Accept</button>
                                            <button class="btn btn-sm btn-danger" disabled="@isProcessingRequest" @onclick="() => AcceptRequest(request.Id)">Decline</button>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <p>No incoming friend requests.</p>
                        }
                    }
                    else
                    {
                        <p>Error: Invalid tab selected. Please try again.</p>
                    }
                }
            </div>
        </div>
    </div>
</div>

<style>
    .tab-buttons .btn {
        border-radius: 5px;
    }

    .tab-buttons .btn.active {
        background-color: #967bb6;
        color: white;
        border-color: #967bb6;
    }

    .search-bar .form-control {
        background-color: #2c2c2c;
        border: 1px solid #444;
    }

    .friend-avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        object-fit: cover;
    }

    .friend-item, .request-item {
        padding: 10px;
        border-bottom: 1px solid #444;
    }

    .loading-container, .unauthorized-container {
        padding: 20px;
        text-align: center;
    }
</style>

@code {
    [SupplyParameterFromForm]
    private FriendRequestModel friendRequestModel { get; set; } = new();
    private string? searchMessage;
    private bool searchSuccess;
    private bool isSendingRequest;
    private bool isLoading = true;
    private bool isAuthenticated;
    private string activeTab = "online";
    private bool isLoadingFriends;
    private bool isLoadingRequests;
    private bool isSwitchingTab;
    private bool isProcessingRequest;
    private bool isRefreshingOnlineFriends;
    private string debugInput = string.Empty;
    private bool showUserInfo;
    private string targetUserAvatar = string.Empty;
    private string targetUserDescription = string.Empty;
    private List<UserAccount> friends = [];
    private List<UserAccount> onlineFriends = [];
    private List<Friendship> incomingRequests = [];
    private UserAccount currentUser = new();
    private System.Timers.Timer? onlineRefreshTimer;
    private bool isTimerInitialized;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Friends.razor: OnInitializedAsync started");
        try
        {
            await LoadAuthenticationState();
            if (isAuthenticated && !isTimerInitialized)
            {
                SetupOnlineFriendsPolling();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Friends.razor: OnInitializedAsync error: {ex}");
            searchMessage = "Error loading friends page.";
            searchSuccess = false;
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("preventDoubleSubmit", "friend-request-form");
                Console.WriteLine("Friends.razor: preventDoubleSubmit initialized for friend-request-form");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Friends.razor: Error initializing preventDoubleSubmit: {ex}");
            }
        }
    }

    private void SetupOnlineFriendsPolling()
    {
        if (isTimerInitialized)
        {
            Console.WriteLine("Friends.razor: Timer already initialized, skipping setup");
            return;
        }

        Console.WriteLine("Friends.razor: Setting up online friends polling");
        onlineRefreshTimer = new System.Timers.Timer(5000);
        onlineRefreshTimer.Elapsed += async (sender, e) =>
        {
            if (activeTab == "online" && isAuthenticated && !isRefreshingOnlineFriends)
            {
                await InvokeAsync(async () =>
                {
                    await RefreshOnlineFriends();
                });
            }
        };
        onlineRefreshTimer.AutoReset = true;
        onlineRefreshTimer.Start();
        isTimerInitialized = true;
        Console.WriteLine("Friends.razor: Timer started");
    }

    private async Task LoadAuthenticationState()
    {
        Console.WriteLine("Friends.razor: LoadAuthenticationState started");
        isLoading = true;
        await InvokeAsync(StateHasChanged);

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        Console.WriteLine($"Friends.razor: isAuthenticated = {isAuthenticated}");

        if (isAuthenticated)
        {
            var username = authState.User.Identity?.Name;
            if (!string.IsNullOrEmpty(username))
            {
                using var dbContext = DbContextFactory.CreateDbContext();
                currentUser = await dbContext.UserAccounts
                    .AsNoTracking()
                    .FirstOrDefaultAsync(u => u.Username == username) ?? new UserAccount();

                if (currentUser.Id == 0)
                {
                    Console.WriteLine("Friends.razor: Current user not found");
                    isAuthenticated = false;
                    Navigation.NavigateTo("/login");
                    return;
                }

                await LoadFriends();
                await LoadIncomingRequests();
                await RefreshOnlineFriends();
            }
            else
            {
                Console.WriteLine("Friends.razor: No username in auth state");
                isAuthenticated = false;
                Navigation.NavigateTo("/login");
            }
        }
        else
        {
            Console.WriteLine("Friends.razor: Not authenticated");
            Navigation.NavigateTo("/login");
        }

        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadFriends()
    {
        Console.WriteLine("Friends.razor: LoadFriends started");
        try
        {
            isLoadingFriends = true;
            await InvokeAsync(StateHasChanged);

            using var dbContext = DbContextFactory.CreateDbContext();
            var friendships = await dbContext.Friendships
                .AsNoTracking()
                .Include(f => f.User1)
                .Include(f => f.User2)
                .Where(f => (f.User1Id == currentUser.Id || f.User2Id == currentUser.Id) && f.Status == "accepted")
                .ToListAsync();

            friends = friendships
                .Select(f => f.User1Id == currentUser.Id ? f.User2 : f.User1)
                .Where(f => f != null)
                .ToList()!;
            Console.WriteLine($"Friends.razor: Loaded {friends.Count} friends");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Friends.razor: Error loading friends: {ex}");
            searchMessage = "Error loading friends.";
            searchSuccess = false;
        }
        finally
        {
            isLoadingFriends = false;
            await InvokeAsync(StateHasChanged);
            Console.WriteLine("Friends.razor: LoadFriends completed");
        }
    }

    private async Task RefreshOnlineFriends()
    {
        Console.WriteLine("Friends.razor: RefreshOnlineFriends started");
        try
        {
            isRefreshingOnlineFriends = true;
            await InvokeAsync(StateHasChanged);

            using var dbContext = DbContextFactory.CreateDbContext();
            var now = DateTime.UtcNow;
            var onlineThreshold = now.AddMinutes(-5);

            var friendships = await dbContext.Friendships
                .AsNoTracking()
                .Include(f => f.User1)
                .Include(f => f.User2)
                .Where(f => (f.User1Id == currentUser.Id || f.User2Id == currentUser.Id) && f.Status == "accepted")
                .ToListAsync();

            friends = friendships
                .Select(f => f.User1Id == currentUser.Id ? f.User2 : f.User1)
                .Where(f => f != null)
                .ToList()!;

            onlineFriends = friends
                .Where(f => f.IsOnline || f.LastSeen >= onlineThreshold)
                .ToList();
            Console.WriteLine($"Friends.razor: Loaded {onlineFriends.Count} online friends");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Friends.razor: Error refreshing online friends: {ex}");
            searchMessage = "Error refreshing online friends.";
            searchSuccess = false;
        }
        finally
        {
            isRefreshingOnlineFriends = false;
            await InvokeAsync(StateHasChanged);
            Console.WriteLine("Friends.razor: RefreshOnlineFriends completed");
        }
    }

    private async Task LoadIncomingRequests()
    {
        Console.WriteLine("Friends.razor: LoadIncomingRequests started");
        try
        {
            isLoadingRequests = true;
            await InvokeAsync(StateHasChanged);

            using var dbContext = DbContextFactory.CreateDbContext();
            incomingRequests = await dbContext.Friendships
                .AsNoTracking()
                .Include(f => f.User1)
                .Where(f => f.User2Id == currentUser.Id && f.Status == "pending")
                .ToListAsync();
            Console.WriteLine($"Friends.razor: Loaded {incomingRequests.Count} incoming requests");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Friends.razor: Error loading incoming requests: {ex}");
            searchMessage = "Error loading friend requests.";
            searchSuccess = false;
        }
        finally
        {
            isLoadingRequests = false;
            await InvokeAsync(StateHasChanged);
            Console.WriteLine("Friends.razor: LoadIncomingRequests completed");
        }
    }

    private async Task SetTab(string tab)
    {
        if (activeTab != tab && !isSwitchingTab)
        {
            Console.WriteLine($"Friends.razor: Switching to tab {tab}");
            isSwitchingTab = true;
            await InvokeAsync(StateHasChanged);

            try
            {
                activeTab = tab;
                if (tab == "online")
                {
                    await RefreshOnlineFriends();
                }
                else if (tab == "list")
                {
                    await LoadFriends();
                }
                else if (tab == "requests")
                {
                    await LoadIncomingRequests();
                }
                Console.WriteLine($"Friends.razor: Successfully switched to tab {tab}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Friends.razor: Error switching to tab {tab}: {ex}");
                searchMessage = $"Error loading {tab} tab.";
                searchSuccess = false;
            }
            finally
            {
                isSwitchingTab = false;
                await InvokeAsync(StateHasChanged);
                Console.WriteLine($"Friends.razor: Tab switch completed, activeTab = {activeTab}, isSwitchingTab = {isSwitchingTab}");
            }
        }
        else
        {
            Console.WriteLine($"Friends.razor: Skipped tab switch to {tab} (already active or switching)");
        }
    }

    private async Task SendFriendRequest()
    {
        if (isSendingRequest)
        {
            Console.WriteLine("Friends.razor: SendFriendRequest already in progress, ignoring");
            return;
        }

        Console.WriteLine($"Friends.razor: SendFriendRequest started for username '{friendRequestModel.Username}'");
        isSendingRequest = true;
        searchMessage = null;
        searchSuccess = false;
        await InvokeAsync(StateHasChanged);

        try
        {
            if (string.IsNullOrWhiteSpace(friendRequestModel.Username))
            {
                searchMessage = "Username is required.";
                Console.WriteLine("Friends.razor: Username is empty");
                return;
            }

            if (friendRequestModel.Username.Equals(currentUser.Username, StringComparison.OrdinalIgnoreCase))
            {
                searchMessage = "You cannot add yourself as a friend.";
                Console.WriteLine("Friends.razor: Attempted to add self as friend");
                return;
            }

            using var dbContext = DbContextFactory.CreateDbContext();
            var targetUser = await dbContext.UserAccounts
                .AsNoTracking()
                .FirstOrDefaultAsync(u => u.Username == friendRequestModel.Username);

            if (targetUser == null)
            {
                searchMessage = "User not found.";
                Console.WriteLine("Friends.razor: User not found");
                return;
            }

            var existingFriendship = await dbContext.Friendships
                .AsNoTracking()
                .FirstOrDefaultAsync(f =>
                    (f.User1Id == currentUser.Id && f.User2Id == targetUser.Id) ||
                    (f.User1Id == targetUser.Id && f.User2Id == currentUser.Id));

            if (existingFriendship != null)
            {
                searchMessage = existingFriendship.Status == "accepted"
                    ? "This user is already your friend."
                    : "A friend request is already pending.";
                Console.WriteLine($"Friends.razor: Existing friendship status: {existingFriendship.Status}");
                return;
            }

            var friendship = new Friendship
            {
                User1Id = currentUser.Id,
                User2Id = targetUser.Id,
                Status = "pending",
                CreatedAt = DateTime.UtcNow
            };

            dbContext.Friendships.Add(friendship);
            await dbContext.SaveChangesAsync();
            Console.WriteLine($"Friends.razor: Friend request sent to {targetUser.Username}");

            searchMessage = "Friend request sent successfully!";
            searchSuccess = true;
            friendRequestModel.Username = "";
            showUserInfo = false;
            await LoadIncomingRequests();
        }
        catch (Exception ex)
        {
            searchMessage = "Error sending friend request.";
            searchSuccess = false;
            Console.WriteLine($"Friends.razor: Error sending friend request: {ex}");
        }
        finally
        {
            isSendingRequest = false;
            await InvokeAsync(StateHasChanged);
            Console.WriteLine("Friends.razor: SendFriendRequest completed");
        }
    }

    private async Task AcceptRequest(int requestId)
    {
        if (isProcessingRequest)
        {
            Console.WriteLine($"Friends.razor: AcceptRequest already in progress for requestId {requestId}, ignoring");
            return;
        }

        Console.WriteLine($"Friends.razor: AcceptRequest started for requestId {requestId}");
        isProcessingRequest = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            using var dbContext = DbContextFactory.CreateDbContext();
            var request = await dbContext.Friendships
                .FirstOrDefaultAsync(f => f.Id == requestId && f.User2Id == currentUser.Id);

            if (request != null)
            {
                request.Status = "accepted";
                await dbContext.SaveChangesAsync();
                await LoadFriends();
                await LoadIncomingRequests();
                searchMessage = "Friend request accepted.";
                searchSuccess = true;
                Console.WriteLine($"Friends.razor: Accepted request {requestId}");
            }
            else
            {
                searchMessage = "Friend request not found.";
                searchSuccess = false;
                Console.WriteLine($"Friends.razor: Request {requestId} not found");
            }
        }
        catch (Exception ex)
        {
            searchMessage = "Error accepting friend request.";
            searchSuccess = false;
            Console.WriteLine($"Friends.razor: Error accepting request: {ex}");
        }
        finally
        {
            isProcessingRequest = false;
            await InvokeAsync(StateHasChanged);
            Console.WriteLine("Friends.razor: AcceptRequest completed");
        }
    }

    private async Task DeclineRequest(int requestId)
    {
        if (isProcessingRequest)
        {
            Console.WriteLine($"Friends.razor: DeclineRequest already in progress for requestId {requestId}, ignoring");
            return;
        }

        Console.WriteLine($"Friends.razor: DeclineRequest started for requestId {requestId}");
        isProcessingRequest = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            using var dbContext = DbContextFactory.CreateDbContext();
            var request = await dbContext.Friendships
                .FirstOrDefaultAsync(f => f.Id == requestId && f.User2Id == currentUser.Id);

            if (request != null)
            {
                dbContext.Friendships.Remove(request);
                await dbContext.SaveChangesAsync();
                await LoadIncomingRequests();
                searchMessage = "Friend request declined.";
                searchSuccess = true;
                Console.WriteLine($"Friends.razor: Declined request {requestId}");
            }
            else
            {
                searchMessage = "Friend request not found.";
                searchSuccess = false;
                Console.WriteLine($"Friends.razor: Request {requestId} not found");
            }
        }
        catch (Exception ex)
        {
            searchMessage = "Error declining friend request.";
            searchSuccess = false;
            Console.WriteLine($"Friends.razor: Error declining request: {ex}");
        }
        finally
        {
            isProcessingRequest = false;
            await InvokeAsync(StateHasChanged);
            Console.WriteLine("Friends.razor: DeclineRequest completed");
        }
    }

    private async Task OnInputChanged(ChangeEventArgs e)
    {
        friendRequestModel.Username = e.Value?.ToString() ?? string.Empty;
        showUserInfo = false;
        targetUserAvatar = string.Empty;
        targetUserDescription = string.Empty;
        searchMessage = null;
        searchSuccess = false;

        Console.WriteLine($"Friends.razor: Search input changed to '{friendRequestModel.Username}'");

        if (!string.IsNullOrEmpty(friendRequestModel.Username))
        {
            using var dbContext = DbContextFactory.CreateDbContext();
            var userAccount = await dbContext.UserAccounts
                .AsNoTracking()
                .Where(u => u.Username == friendRequestModel.Username)
                .Select(u => new { u.AvatarUrl, u.Description })
                .FirstOrDefaultAsync();

            if (userAccount != null)
            {
                showUserInfo = true;
                targetUserAvatar = userAccount.AvatarUrl ?? string.Empty;
                targetUserDescription = userAccount.Description ?? string.Empty;
                Console.WriteLine($"Friends.razor: Found user '{friendRequestModel.Username}' with avatar '{targetUserAvatar}'");
            }
            else
            {
                Console.WriteLine($"Friends.razor: User '{friendRequestModel.Username}' not found");
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Console.WriteLine("Friends.razor: Disposing onlineRefreshTimer");
        onlineRefreshTimer?.Stop();
        onlineRefreshTimer?.Dispose();
        onlineRefreshTimer = null;
        isTimerInitialized = false;
    }
}

