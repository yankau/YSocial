@page "/friends"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using YSocial.Components.Models
@using YSocial.Components.Services
@inject AuthenticationStateProvider AuthStateProvider
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="row justify-content-center pt-4 pb-4">
    <div class="col-lg-6">
        <div class="card bg-dark text-light" style="width: 600px; margin: 0 auto; background-color: #2c2c2c">
            <div class="card-header" style="background-color: #1a1a1a">
                <h2 class="mb-0">Friends</h2>
            </div>
            <div class="card-body" style="background-color: #1a1a1a">
                @if (isLoading)
                {
                    <div class="loading-container text-center">Loading...</div>
                }
                else if (!isAuthenticated)
                {
                    <div class="unauthorized-container text-center">
                        <p>Please sign in to view your friends</p>
                        <a href="/login" class="btn btn-primary">Sign In</a>
                    </div>
                }
                else
                {
                    <!-- Navigation Buttons -->
                    <div class="tab-buttons mb-3">
                        <a href="/friends/online" class="btn btn-purple me-2">
                            Online
                        </a>
                        <a href="/friends/list" class="btn btn-purple me-2">
                            List
                        </a>
                        <a href="/friends/requests" class="btn btn-purple">
                            Requests (@incomingRequests.Count)
                        </a>
                    </div>

                    <!-- Search Bar -->
                    <div class="search-bar mb-4">
                        <EditForm Model="friendRequestModel" OnValidSubmit="SendFriendRequest" FormName="FriendRequestForm" id="friend-request-form">
                            <DataAnnotationsValidator />
                            <div class="input-group">
                                <InputText @bind-Value="friendRequestModel.Username" class="form-control bg-secondary border-dark text-light" placeholder="Enter username to add friend" @oninput="OnInputChanged" />
                                <button class="btn btn-purple" type="submit" disabled="@isSendingRequest">
                                    @(isSendingRequest ? "Sending..." : "Send Request")
                                </button>
                            </div>
                            <ValidationMessage For="() => friendRequestModel.Username" />
                            @if (!string.IsNullOrEmpty(searchMessage))
                            {
                                <div class="mt-2 @(searchSuccess ? "text-success" : "text-danger")">@searchMessage</div>
                            }
                            @if (showUserInfo && !string.IsNullOrEmpty(friendRequestModel.Username))
                            {
                                <div class="user-info mt-3">
                                    <div class="d-flex align-items-center mb-2">
                                        <img src="@(string.IsNullOrEmpty(targetUserAvatar) ? "/images/default-avatar.png" : targetUserAvatar)"
                                             class="avatar-preview rounded-circle me-2"
                                             style="width: 40px; height: 40px; object-fit: cover"
                                             alt="User avatar" />
                                        <span>@friendRequestModel.Username</span>
                                    </div>
                                    @if (!string.IsNullOrEmpty(targetUserDescription))
                                    {
                                        <div class="user-description small text-muted">
                                        
                                            @targetUserDescription
                                        </div>
                                    }
                                </div>
                            }
                        </EditForm>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<style>
    .tab-buttons .btn {
        border-radius: 5px;
        pointer-events: auto;
        z-index: 10;
    }

    .btn-purple {
        background-color: #967bb6;
        border-color: #967bb6;
        color: white;
    }

    .btn-purple:hover {
        background-color: #845aa6;
        border-color: #845aa6;
    }

    .search-bar .form-control {
        background-color: #2c2c2c;
        border: 1px solid #444;
    }

    .loading-container, .unauthorized-container {
        padding: 20px;
        text-align: center;
    }
</style>

@code {
    [SupplyParameterFromForm]
    private FriendRequestModel friendRequestModel { get; set; } = new();
    private string? searchMessage;
    private bool searchSuccess;
    private bool isSendingRequest;
    private bool isLoading = true;
    private bool isAuthenticated;
    private bool showUserInfo;
    private string targetUserAvatar = string.Empty;
    private string targetUserDescription = string.Empty;
    private List<Friendship> incomingRequests = [];
    private UserAccount currentUser = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAuthenticationState();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("preventDoubleSubmit", "friend-request-form");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing preventDoubleSubmit: {ex}");
            }
        }
    }

    private async Task LoadAuthenticationState()
    {
        isLoading = true;
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
        {
            var username = authState.User.Identity?.Name;
            if (!string.IsNullOrEmpty(username))
            {
                using var dbContext = DbContextFactory.CreateDbContext();
                currentUser = await dbContext.UserAccounts
                    .AsNoTracking()
                    .FirstOrDefaultAsync(u => u.Username == username) ?? new UserAccount();

                if (currentUser.Id == 0)
                {
                    isAuthenticated = false;
                    Navigation.NavigateTo("/login");
                    return;
                }

                await LoadIncomingRequests();
            }
            else
            {
                isAuthenticated = false;
                Navigation.NavigateTo("/login");
            }
        }
        else
        {
            Navigation.NavigateTo("/login");
        }

        isLoading = false;
    }

    private async Task LoadIncomingRequests()
    {
        try
        {
            using var dbContext = DbContextFactory.CreateDbContext();
            incomingRequests = await dbContext.Friendships
                .AsNoTracking()
                .Include(f => f.User1)
                .Where(f => f.User2Id == currentUser.Id && f.Status == "pending")
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading incoming requests: {ex}");
            searchMessage = "Error loading friend requests.";
            searchSuccess = false;
        }
    }

    private async Task OnInputChanged(ChangeEventArgs e)
    {
        var username = e.Value?.ToString();
        if (string.IsNullOrEmpty(username))
        {
            showUserInfo = false;
            targetUserAvatar = string.Empty;
            targetUserDescription = string.Empty;
            return;
        }
        

        try
        {
            using var dbContext = DbContextFactory.CreateDbContext();
            var user = await dbContext.UserAccounts
                .AsNoTracking()
                .FirstOrDefaultAsync(u => u.Username == username);

            if (user != null)
            {
                showUserInfo = true;
                targetUserAvatar = user.AvatarUrl ?? string.Empty;
                targetUserDescription = user.Description ?? string.Empty;
            }
            else
            {
                showUserInfo = false;
                targetUserAvatar = string.Empty;
                targetUserDescription = string.Empty;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching for user: {ex}");
            showUserInfo = false;
            targetUserAvatar = string.Empty;
            targetUserDescription = string.Empty;
        }
    }

    private async Task SendFriendRequest()
    {
        if (string.IsNullOrEmpty(friendRequestModel.Username))
        {
            searchMessage = "Please enter a username";
            searchSuccess = false;
            return;
        }

        isSendingRequest = true;
        try
        {
            using var dbContext = DbContextFactory.CreateDbContext();
            var targetUser = await dbContext.UserAccounts
                .AsNoTracking()
                .FirstOrDefaultAsync(u => u.Username == friendRequestModel.Username);

            if (targetUser == null)
            {
                searchMessage = "User not found";
                searchSuccess = false;
                return;
            }

            if (targetUser.Id == currentUser.Id)
            {
                searchMessage = "You cannot send a friend request to yourself";
                searchSuccess = false;
                return;
            }

            var existingFriendship = await dbContext.Friendships
                .FirstOrDefaultAsync(f =>
                    (f.User1Id == currentUser.Id && f.User2Id == targetUser.Id) ||
                    (f.User1Id == targetUser.Id && f.User2Id == currentUser.Id));

            if (existingFriendship != null)
            {
                if (existingFriendship.Status == "accepted")
                {
                    searchMessage = "You are already friends with this user";
                }
                else if (existingFriendship.Status == "pending")
                {
                    if (existingFriendship.User1Id == currentUser.Id)
                    {
                        searchMessage = "You have already sent a friend request to this user";
                    }
                    else
                    {
                        searchMessage = "This user has already sent you a friend request";
                    }
                }
                searchSuccess = false;
                return;
            }

            var newFriendship = new Friendship
            {
                User1Id = currentUser.Id,
                User2Id = targetUser.Id,
                Status = "pending",
                CreatedAt = DateTime.UtcNow
            };

            dbContext.Friendships.Add(newFriendship);
            await dbContext.SaveChangesAsync();

            searchMessage = "Friend request sent successfully";
            searchSuccess = true;
            friendRequestModel.Username = string.Empty;
            showUserInfo = false;
            targetUserAvatar = string.Empty;
            targetUserDescription = string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending friend request: {ex}");
            searchMessage = "Error sending friend request";
            searchSuccess = false;
        }
        finally
        {
            isSendingRequest = false;
        }
    }
}