@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using YSocial.Components.Models
@inject AppDbContext appDbContext
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider

<div class="row justify-content-center pt-4 pb-4">
    <div class="col-lg-4">
        <EditForm Model="loginModel" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            
            <div class="card bg-dark text-light" style="width: 450px; margin: 0 auto; background-color: #2c2c2c">
                <div class="card-header" style="background-color: #1a1a1a">
                    <h2 class="mb-0">Login</h2>
                </div>
             
                <div class="card-body" style="background-color: #1a1a1a">
                    <div class="mb-3">
                        <label class="form-label">Username</label>
                        <InputText @bind-Value="loginModel.Username" class="form-control bg-secondary border-dark text-light" placeholder="Enter username" />
                        <ValidationMessage For="()=> loginModel.Username" />
                    </div>
                  
                    <div class="mb-3">
                        <label class="form-label">Password</label>
                        <InputText type="password" @bind-Value="loginModel.Password" class="form-control bg-secondary border-dark text-light" placeholder="Enter password" />
                        <ValidationMessage For="()=> loginModel.Password" />
                    </div>

                    @if (!string.IsNullOrWhiteSpace(errorMessage))
                    {
                        <p class="text-danger">@errorMessage</p>
                    }

                    @if (showUserInfo)
                    {
                        <div class="user-info mt-3">
                            <div class="d-flex align-items-center mb-2">
                                <img src="@(string.IsNullOrEmpty(currentUserAvatar) ? "/images/default-avatar.png" : currentUserAvatar)" 
                                     class="avatar-preview rounded-circle me-2" 
                                     style="width: 40px; height: 40px; object-fit: cover" 
                                     alt="User avatar" />
                                <span>@loginModel.Username</span>
                            </div>
                            @if (!string.IsNullOrEmpty(currentUserDescription))
                            {
                                <div class="user-description small text-muted">
                                    @currentUserDescription
                                </div>
                            }
                        </div>
                    }
                </div>
                <div class="card-footer" style="background-color: #1a1a1a">
                    <button type="submit" class="btn btn-sm w-100" style="background-color: #967bb6; color: white; border: none">Sign in</button>
                </div>
                <div class="text-center mt-2">
                    <a href="/register" class="text-white">Don't have an account? Register</a>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContent? HttpContent { get; set; } 
    
    [SupplyParameterFromForm]    
    private LoginModel loginModel { get; set; } = new();
    
    private string? errorMessage = null;
    private bool showUserInfo = false;
    private string currentUserAvatar = string.Empty;
    private string currentUserDescription = string.Empty;

    private async Task Authenticate()
    {
        errorMessage = null;
        showUserInfo = false;

        var userAccount = await appDbContext.UserAccounts
            .Select(u => new {
                u.Username,
                u.Password,
                u.AvatarUrl,
                u.Description
            })
            .FirstOrDefaultAsync(x => x.Username == loginModel.Username);
    
        if (userAccount == null)
        {
            errorMessage = "Invalid username or password";
            return;
        }

        // Показываем информацию о пользователе перед входом
        showUserInfo = true;
        currentUserAvatar = userAccount.AvatarUrl ?? string.Empty;
        currentUserDescription = userAccount.Description ?? string.Empty;
        StateHasChanged();

        if (userAccount.Password != Cryptography.Sha256Hash(loginModel.Password))
        {
            errorMessage = "Invalid password";
            return;
        }
        
        // Используем AuthService для входа
        var authResult = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);
        
        if (authResult)
        {
            ((CustomAuthStateProvider)AuthStateProvider).SetAuthenticatedUser(loginModel.Username);
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            errorMessage = "Login failed";
        }
    }

    private async Task OnUsernameChanged()
    {
        if (!string.IsNullOrEmpty(loginModel.Username))
        {
            var userAccount = await appDbContext.UserAccounts
                .Where(u => u.Username == loginModel.Username)
                .Select(u => new { u.AvatarUrl, u.Description })
                .FirstOrDefaultAsync();

            if (userAccount != null)
            {
                showUserInfo = true;
                currentUserAvatar = userAccount.AvatarUrl ?? string.Empty;
                currentUserDescription = userAccount.Description ?? string.Empty;
            }
            else
            {
                showUserInfo = false;
            }
        }
        else
        {
            showUserInfo = false;
        }
    }
}