@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using YSocial.Components.Models
@using YSocial.Components.Services
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject NavigationManager Navigation
@inject AuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<div class="row justify-content-center pt-4 pb-4">
    <div class="col-lg-4">
        <EditForm Model="loginModel" OnValidSubmit="Authenticate" FormName="LoginForm" id="login-form">
            <DataAnnotationsValidator />
            <ValidationSummary />
            
            <div class="card bg-dark text-light" style="width: 450px; margin: 0 auto; background-color: #2c2c2c">
                <div class="card-header" style="background-color: #1a1a1a">
                    <h2 class="mb-0">Login</h2>
                </div>
                
                <div class="card-body" style="background-color: #1a1a1a">
                    <div class="mb-3">
                        <label class="form-label">Username</label>
                        <InputText @bind-Value="loginModel.Username" class="form-control bg-secondary border-dark text-light" placeholder="Enter username" @oninput="OnUsernameChanged" />
                        <ValidationMessage For="() => loginModel.Username" />
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Password</label>
                        <InputText type="password" @bind-Value="loginModel.Password" class="form-control bg-secondary border-dark text-light" placeholder="Enter password" />
                        <ValidationMessage For="() => loginModel.Password" />
                    </div>

                    @if (!string.IsNullOrWhiteSpace(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }

                    @if (showUserInfo && !string.IsNullOrEmpty(loginModel.Username))
                    {
                        <div class="user-info mt-3">
                            <div class="d-flex align-items-center mb-2">
                                <img src="@(string.IsNullOrEmpty(currentUserAvatar) ? "/images/default-avatar.png" : currentUserAvatar)" 
                                     class="avatar-preview rounded-circle me-2" 
                                     style="width: 40px; height: 40px; object-fit: cover" 
                                     alt="User avatar" />
                                <span>@loginModel.Username</span>
                            </div>
                            @if (!string.IsNullOrEmpty(currentUserDescription))
                            {
                                <div class="user-description small text-muted">
                                    @currentUserDescription
                                </div>
                            }
                        </div>
                    }
                </div>
                <div class="card-footer" style="background-color: #1a1a1a">
                    <button type="submit" class="btn btn-sm w-100" style="background-color: #967bb6; color: white; border: none" disabled="@isSubmitting">
                        @(isSubmitting ? "Signing in..." : "Sign in")
                    </button>
                </div>
                <div class="text-center mt-2">
                    <a href="/register" class="text-white">Don't have an account? Register</a>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private LoginModel loginModel { get; set; } = new();
    private string? errorMessage;
    private bool showUserInfo;
    private string currentUserAvatar = string.Empty;
    private string currentUserDescription = string.Empty;
    private bool isSubmitting;
    private bool shouldNavigateToMainPage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("preventDoubleSubmit", "login-form");
        }

        if (shouldNavigateToMainPage)
        {
            Console.WriteLine("OnAfterRenderAsync: Navigating to main page via JavaScript");
            await JSRuntime.InvokeVoidAsync("window.location.assign", "/");
        }
    }

    private async Task Authenticate()
    {
        if (isSubmitting)
        {
            Console.WriteLine("Authenticate: Already submitting, ignoring duplicate call");
            return;
        }

        isSubmitting = true;
        shouldNavigateToMainPage = false;
        StateHasChanged();

        try
        {
            Console.WriteLine("Authenticate started");
            errorMessage = null;
            showUserInfo = false;

            using var dbContext = DbContextFactory.CreateDbContext();
            var userAccount = await dbContext.UserAccounts
                .AsNoTracking()
                .Select(u => new { u.Username, u.Password, u.AvatarUrl, u.Description })
                .FirstOrDefaultAsync(u => u.Username == loginModel.Username);

            if (userAccount == null)
            {
                errorMessage = "Invalid username or password";
                Console.WriteLine("User not found");
                return;
            }

            Console.WriteLine("User found, showing user info");
            showUserInfo = true;
            currentUserAvatar = userAccount.AvatarUrl ?? string.Empty;
            currentUserDescription = userAccount.Description ?? string.Empty;
            StateHasChanged();

            if (userAccount.Password != Cryptography.Sha256Hash(loginModel.Password))
            {
                errorMessage = "Invalid password";
                Console.WriteLine("Invalid password");
                return;
            }

            Console.WriteLine("Password valid, calling AuthService");
            var authResult = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);

            if (authResult)
            {
                Console.WriteLine("AuthService success, signing in");
                await ((CustomAuthStateProvider)AuthStateProvider).SignInAsync(loginModel.Username);
                Console.WriteLine("SignInAsync completed, waiting for state propagation");

                // Delay to ensure authentication state propagation
                await Task.Delay(1000);

                Console.WriteLine("Setting flag to navigate to main page");
                shouldNavigateToMainPage = true;
            }
            else
            {
                errorMessage = "Login failed";
                Console.WriteLine("AuthService failed");
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login. Please try again.";
            Console.WriteLine($"Error during login: {ex}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task OnUsernameChanged(ChangeEventArgs e)
    {
        loginModel.Username = e.Value?.ToString() ?? string.Empty;
        showUserInfo = false;
        currentUserAvatar = string.Empty;
        currentUserDescription = string.Empty;

        if (!string.IsNullOrEmpty(loginModel.Username))
        {
            using var dbContext = DbContextFactory.CreateDbContext();
            var userAccount = await dbContext.UserAccounts
                .AsNoTracking()
                .Where(u => u.Username == loginModel.Username)
                .Select(u => new { u.AvatarUrl, u.Description })
                .FirstOrDefaultAsync();

            if (userAccount != null)
            {
                showUserInfo = true;
                currentUserAvatar = userAccount.AvatarUrl ?? string.Empty;
                currentUserDescription = userAccount.Description ?? string.Empty;
            }
        }

        StateHasChanged();
    }
}