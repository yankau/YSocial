@page "/profile"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using YSocial.Components.Models
@using YSocial.Components.Services
@inject AuthenticationStateProvider AuthStateProvider
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject NavigationManager Navigation

<PageTitle>Profile</PageTitle>

@if (isLoading)
{
    <div class="loading-container">Loading profile...</div>
}
else if (!isAuthenticated)
{
    <div class="unauthorized-container">
        <p>Please sign in to view your profile</p>
        <a href="/login" class="login-button">Sign In</a>
    </div>
}
else
{
    <div class="profile-layout">
        <div class="profile-header">
            <img class="profile-avatar" src="@GetAvatarUrl()" alt="Profile Avatar" />
            <h1 class="username">@user.Username</h1>
            <p class="description">@(string.IsNullOrEmpty(user.Description) ? "No description yet" : user.Description)</p>
        </div>

        <div class="settings-button">
            <img src="/images/gear-icon.png" alt="Settings" @onclick="ToggleSettings" />
            @if (showSettings)
            {
                <div class="settings-dropdown">
                    <button @onclick="@(() => ShowModal("username"))">Change Username</button>
                    <button @onclick="OpenAvatarUpload">Change Avatar</button>
                    <button @onclick="@(() => ShowModal("description"))">Change Description</button>
                    <button @onclick="@(() => ShowModal("password"))">Change Password</button>
                    <NavLink href="/logout" class="logout-button">Logout</NavLink>
                </div>
            }
        </div>

        <div class="posts-section">
            <h3>Recent Posts</h3>
            @if (recentPosts.Any())
            {
                <div class="posts-list">
                    @foreach (var post in recentPosts.OrderByDescending(p => p.CreatedAt))
                    {
                        <div class="post-item">
                            <h4>@post.Title</h4>
                            <p>@post.Content</p>
                            @if (!string.IsNullOrEmpty(post.ImageUrls))
                            {
                                @foreach (var imageUrl in post.ImageUrls.Split(',', StringSplitOptions.RemoveEmptyEntries))
                                {
                                    <img src="@imageUrl.Trim()" alt="Post Image" class="post-image" />
                                }
                            }
                            <span>@post.CreatedAt.ToString("MMM dd, yyyy")</span>
                        </div>
                    }
                </div>
            }
            else
            {
                <p>No posts yet</p>
            }
        </div>
    </div>
}

@code {
    private UserAccount user = new();
    private bool isLoading = true;
    private bool isAuthenticated;
    private bool showSettings;
    private List<Post> recentPosts = [];

    protected override async Task OnInitializedAsync()
    {
        await LoadAuthenticationState();
        ((CustomAuthStateProvider)AuthStateProvider).AuthenticationStateChanged += OnAuthenticationStateChanged;
    }

    private async Task LoadAuthenticationState()
    {
        isLoading = true;
        StateHasChanged();

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        Console.WriteLine($"Profile.razor: isAuthenticated = {isAuthenticated}");

        if (isAuthenticated)
        {
            var username = authState.User.Identity?.Name;
            if (!string.IsNullOrEmpty(username))
            {
                Console.WriteLine($"Profile.razor: Loading user {username}");
                using var dbContext = DbContextFactory.CreateDbContext();
                user = await dbContext.UserAccounts
                    .AsNoTracking()
                    .Include(u => u.Posts)
                    .FirstOrDefaultAsync(u => u.Username == username) ?? new UserAccount();

                recentPosts = user.Posts?.ToList() ?? [];
            }
            else
            {
                Console.WriteLine("Profile.razor: No username in auth state");
                isAuthenticated = false;
            }
        }
        else
        {
            Console.WriteLine("Profile.razor: Not authenticated, clearing user data");
            user = new UserAccount();
            recentPosts = [];
        }

        isLoading = false;
        StateHasChanged();
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        await LoadAuthenticationState();
        await InvokeAsync(StateHasChanged);
    }

    private string GetAvatarUrl() => string.IsNullOrEmpty(user.AvatarUrl) ? "/images/default-avatar.png" : user.AvatarUrl;

    private void ToggleSettings() => showSettings = !showSettings;

    private void OpenAvatarUpload() { }
    private void ShowModal(string type) { }

    public void Dispose()
    {
        ((CustomAuthStateProvider)AuthStateProvider).AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}