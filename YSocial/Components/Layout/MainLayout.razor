@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using YSocial.Components.Services
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <div class="auth-buttons">
                @if (isAuthenticated)
                {
                    <button class="btn btn-link" @onclick="Logout">Log Out</button>
                }
                else
                {
                    <a href="/login" class="btn btn-link">Sign In</a>
                    <a href="/register" class="btn btn-link">Sign Up</a>
                }
            </div>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>
<script src="/js/site.js"></script>
<script src="_framework/blazor.server.js"></script>
@code {
    private bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        await LoadAuthenticationState();
        ((CustomAuthStateProvider)AuthStateProvider).AuthenticationStateChanged += OnAuthenticationStateChanged;
    }

    private async Task LoadAuthenticationState()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        StateHasChanged();
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        await LoadAuthenticationState();
        await InvokeAsync(StateHasChanged);
    }

    private async Task Logout()
    {
        await ((CustomAuthStateProvider)AuthStateProvider).SignOutAsync();
        Navigation.NavigateTo("/login");
    }

    public void Dispose()
    {
        ((CustomAuthStateProvider)AuthStateProvider).AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}