@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using YSocial.Components.Models
@using YSocial.Components.Services
@inject AuthenticationStateProvider AuthStateProvider
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject NavigationManager Navigation

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">YSocial</a>
    </div>
</div>

<div class="nav-scrollable">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link profile-nav-item" href="/profile" Match="NavLinkMatch.All">
                <div class="profile-nav-content">
                    @if (isAuthenticated && user != null)
                    {
                        <img class="nav-avatar" src="@(user.AvatarUrl ?? "/images/default-avatar.png")" alt="Profile" />
                        <span class="nav-link-text">@user.Username</span>
                    }
                    else
                    {
                        <div class="nav-avatar default-avatar"></div>
                        <span class="nav-link-text">Profile</span>
                    }
                </div>
            </NavLink>
        </div>

        <!-- New Chat Link -->
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/chat">
                <span class="oi oi-chat" aria-hidden="true"></span> Chat@(unreadMessages > 0 ? $" ({unreadMessages})" : "")
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/friends">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Friends
            </NavLink>
        </div>
        <!-- New Posts Link -->
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/posts">
                <span class="oi oi-comment-square" aria-hidden="true"></span> Posts
            </NavLink>
        </div>

        <!-- Authentication Buttons -->
        <div class="nav-item px-3">
            @if (isAuthenticated)
            {
                <NavLink class="nav-link" href="/logout">
                    <span class="oi oi-account-logout" aria-hidden="true"></span> Log Out
                </NavLink>
            }
            else
            {
                <NavLink class="nav-link" href="/login">
                    <span class="oi oi-account-login" aria-hidden="true"></span> Sign In
                </NavLink>
                <NavLink class="nav-link" href="/register">
                    <span class="oi oi-person" aria-hidden="true"></span> Sign Up
                </NavLink>
            }
        </div>
    </nav>
</div>

@code {
    private bool isAuthenticated;
    private UserAccount? user;
    private int unreadMessages;

    protected override async Task OnInitializedAsync()
    {
        await LoadAuthenticationState();
        ((CustomAuthStateProvider)AuthStateProvider).AuthenticationStateChanged += OnAuthenticationStateChanged;
    }

    private async Task LoadAuthenticationState()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
        {
            var username = authState.User.Identity?.Name;
            if (!string.IsNullOrEmpty(username))
            {
                using var dbContext = DbContextFactory.CreateDbContext();
                user = await dbContext.UserAccounts
                    .AsNoTracking()
                    .FirstOrDefaultAsync(u => u.Username == username);
                unreadMessages = await dbContext.ChatMessages
                    .CountAsync(m => m.ReceiverId == user.Id && !m.IsRead);
            }
            else
            {
                user = null;
                unreadMessages = 0;
            }
        }
        else
        {
            user = null;
            unreadMessages = 0;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        await LoadAuthenticationState();
    }

    public void Dispose()
    {
        ((CustomAuthStateProvider)AuthStateProvider).AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}