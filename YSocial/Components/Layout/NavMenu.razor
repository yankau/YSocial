@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using YSocial.Components.Models
@using YSocial.Components.Services
@inject AuthenticationStateProvider AuthStateProvider
@inject AppDbContext DbContext
@inject NavigationManager NavigationManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">YSocial</a>
    </div>
</div>

<div class="nav-scrollable">
    <nav class="nav flex-column">
        <!-- Вкладка Profile вверху -->
        <div class="nav-item px-3 profile-nav-item" @onclick="NavigateToProfileOrLogin">
            <div class="profile-nav-content">
                @if (isAuthenticated && user != null)
                {
                    <img class="nav-avatar" src="@(user.AvatarUrl ?? "/images/default-avatar.png")" alt="Profile" />
                    <span class="nav-link-text">@user.Username</span>
                }
                else
                {
                    <div class="nav-avatar default-avatar"></div>
                    <span class="nav-link-text">Profile</span>
                }
            </div>
        </div>

        <!-- Остальные пункты меню -->
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/counter">
                <span class="oi oi-plus" aria-hidden="true"></span> Counter
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/weather">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Weather
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/friends">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Friends
            </NavLink>
        </div>
    </nav>
</div>

@code {
    private bool isAuthenticated = false;
    private UserAccount? user;

    protected override async Task OnInitializedAsync()
    {
        await LoadAuthenticationState();
        // Подписываемся на изменения состояния авторизации
        ((CustomAuthStateProvider)AuthStateProvider).AuthenticationStateChanged += OnAuthenticationStateChanged;
    }

    private async Task LoadAuthenticationState()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
        {
            var username = authState.User.Identity?.Name;
            if (!string.IsNullOrEmpty(username))
            {
                user = await DbContext.UserAccounts
                    .FirstOrDefaultAsync(u => u.Username == username);
            }
        }
        else
        {
            user = null;
        }

        StateHasChanged();
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        await LoadAuthenticationState();
    }

    private void NavigateToProfileOrLogin()
    {
        if (isAuthenticated && user != null)
        {
            NavigationManager.NavigateTo("/profile", forceLoad: true); // Явное перенаправление на /profile
        }
        else
        {
            NavigationManager.NavigateTo("/login", forceLoad: true); // Явное перенаправление на /login
        }
    }

    public void Dispose()
    {
        ((CustomAuthStateProvider)AuthStateProvider).AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}