@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using YSocial.Components.Models
@inject AuthenticationStateProvider AuthStateProvider
@inject AppDbContext DbContext

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">YSocial</a>
    </div>
</div>

<div class="nav-scrollable">
    <nav class="nav flex-column">
        <div class="nav-item px-3 profile-nav-item">
            @if (isAuthenticated)
            {
                <NavLink class="profile-nav-content" href="/profile">
                    <img class="nav-avatar"
                         src="@(user?.AvatarUrl ?? "/images/default-avatar.png")"
                         alt="Profile" />
                    <span class="nav-link-text">@user?.Username</span>
                </NavLink>
            }
            else
            {
                <NavLink class="profile-nav-content" href="/login">
                    <div class="nav-avatar default-avatar"></div>
                    <span class="nav-link-text">Profile</span>
                </NavLink>
            }
        </div>

        <!-- Остальные пункты меню -->
    </nav>
</div>

@code {
    private bool isAuthenticated = false;
    private UserAccount? user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
        {
            var username = authState.User.Identity?.Name;
            if (!string.IsNullOrEmpty(username))
            {
                user = await DbContext.UserAccounts
                    .FirstOrDefaultAsync(u => u.Username == username);
            }
        }

        // Подписываемся на изменения состояния аутентификации
        ((CustomAuthStateProvider)AuthStateProvider).AuthenticationStateChanged += OnAuthenticationStateChanged;
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authState = await task;
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
        {
            var username = authState.User.Identity?.Name;
            if (!string.IsNullOrEmpty(username))
            {
                user = await DbContext.UserAccounts
                    .FirstOrDefaultAsync(u => u.Username == username);
            }
        }
        else
        {
            user = null;
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        ((CustomAuthStateProvider)AuthStateProvider).AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}